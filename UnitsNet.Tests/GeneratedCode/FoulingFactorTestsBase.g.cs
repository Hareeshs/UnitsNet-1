//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of FoulingFactor.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FoulingFactorTestsBase
    {
        protected abstract double HourSquareFeetDegreefahrenheitsPerBtuInOneHourSquareFeetDegreefahrenheitPerBtu { get; }
        protected abstract double SquareCentimeterHourDegreeCentigradesPerKilloCalorieInOneHourSquareFeetDegreefahrenheitPerBtu { get; }
        protected abstract double SquareCentimeterKelvinsPerWattInOneHourSquareFeetDegreefahrenheitPerBtu { get; }
        protected abstract double SquareMeterDegreeCentigradesPerWattInOneHourSquareFeetDegreefahrenheitPerBtu { get; }
        protected abstract double SquareMeterKelvinsPerKilloWattInOneHourSquareFeetDegreefahrenheitPerBtu { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double HourSquareFeetDegreefahrenheitsPerBtuTolerance { get { return 1e-5; } }
        protected virtual double SquareCentimeterHourDegreeCentigradesPerKilloCalorieTolerance { get { return 1e-5; } }
        protected virtual double SquareCentimeterKelvinsPerWattTolerance { get { return 1e-5; } }
        protected virtual double SquareMeterDegreeCentigradesPerWattTolerance { get { return 1e-5; } }
        protected virtual double SquareMeterKelvinsPerKilloWattTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void HourSquareFeetDegreefahrenheitPerBtuToFoulingFactorUnits()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.AreEqual(HourSquareFeetDegreefahrenheitsPerBtuInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(SquareCentimeterHourDegreeCentigradesPerKilloCalorieInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.SquareCentimeterHourDegreeCentigradesPerKilloCalorie, SquareCentimeterHourDegreeCentigradesPerKilloCalorieTolerance);
            Assert.AreEqual(SquareCentimeterKelvinsPerWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.SquareCentimeterKelvinsPerWatt, SquareCentimeterKelvinsPerWattTolerance);
            Assert.AreEqual(SquareMeterDegreeCentigradesPerWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.SquareMeterDegreeCentigradesPerWatt, SquareMeterDegreeCentigradesPerWattTolerance);
            Assert.AreEqual(SquareMeterKelvinsPerKilloWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.SquareMeterKelvinsPerKilloWatt, SquareMeterKelvinsPerKilloWattTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, FoulingFactor.From(1, FoulingFactorUnit.HourSquareFeetDegreefahrenheitPerBtu).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(1, FoulingFactor.From(1, FoulingFactorUnit.SquareCentimeterHourDegreeCentigradePerKilloCalorie).SquareCentimeterHourDegreeCentigradesPerKilloCalorie, SquareCentimeterHourDegreeCentigradesPerKilloCalorieTolerance);
            Assert.AreEqual(1, FoulingFactor.From(1, FoulingFactorUnit.SquareCentimeterKelvinPerWatt).SquareCentimeterKelvinsPerWatt, SquareCentimeterKelvinsPerWattTolerance);
            Assert.AreEqual(1, FoulingFactor.From(1, FoulingFactorUnit.SquareMeterDegreeCentigradePerWatt).SquareMeterDegreeCentigradesPerWatt, SquareMeterDegreeCentigradesPerWattTolerance);
            Assert.AreEqual(1, FoulingFactor.From(1, FoulingFactorUnit.SquareMeterKelvinPerKilloWatt).SquareMeterKelvinsPerKilloWatt, SquareMeterKelvinsPerKilloWattTolerance);
        }

        [Test]
        public void As()
        {
            var hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.AreEqual(HourSquareFeetDegreefahrenheitsPerBtuInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.As(FoulingFactorUnit.HourSquareFeetDegreefahrenheitPerBtu), HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(SquareCentimeterHourDegreeCentigradesPerKilloCalorieInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.As(FoulingFactorUnit.SquareCentimeterHourDegreeCentigradePerKilloCalorie), SquareCentimeterHourDegreeCentigradesPerKilloCalorieTolerance);
            Assert.AreEqual(SquareCentimeterKelvinsPerWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.As(FoulingFactorUnit.SquareCentimeterKelvinPerWatt), SquareCentimeterKelvinsPerWattTolerance);
            Assert.AreEqual(SquareMeterDegreeCentigradesPerWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.As(FoulingFactorUnit.SquareMeterDegreeCentigradePerWatt), SquareMeterDegreeCentigradesPerWattTolerance);
            Assert.AreEqual(SquareMeterKelvinsPerKilloWattInOneHourSquareFeetDegreefahrenheitPerBtu, hoursquarefeetdegreefahrenheitperbtu.As(FoulingFactorUnit.SquareMeterKelvinPerKilloWatt), SquareMeterKelvinsPerKilloWattTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.AreEqual(1, FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(hoursquarefeetdegreefahrenheitperbtu.HourSquareFeetDegreefahrenheitsPerBtu).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(1, FoulingFactor.FromSquareCentimeterHourDegreeCentigradesPerKilloCalorie(hoursquarefeetdegreefahrenheitperbtu.SquareCentimeterHourDegreeCentigradesPerKilloCalorie).HourSquareFeetDegreefahrenheitsPerBtu, SquareCentimeterHourDegreeCentigradesPerKilloCalorieTolerance);
            Assert.AreEqual(1, FoulingFactor.FromSquareCentimeterKelvinsPerWatt(hoursquarefeetdegreefahrenheitperbtu.SquareCentimeterKelvinsPerWatt).HourSquareFeetDegreefahrenheitsPerBtu, SquareCentimeterKelvinsPerWattTolerance);
            Assert.AreEqual(1, FoulingFactor.FromSquareMeterDegreeCentigradesPerWatt(hoursquarefeetdegreefahrenheitperbtu.SquareMeterDegreeCentigradesPerWatt).HourSquareFeetDegreefahrenheitsPerBtu, SquareMeterDegreeCentigradesPerWattTolerance);
            Assert.AreEqual(1, FoulingFactor.FromSquareMeterKelvinsPerKilloWatt(hoursquarefeetdegreefahrenheitperbtu.SquareMeterKelvinsPerKilloWatt).HourSquareFeetDegreefahrenheitsPerBtu, SquareMeterKelvinsPerKilloWattTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            FoulingFactor v = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.AreEqual(-1, -v.HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(2, (FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(3)-v).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(2, (v + v).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(10, (v*10).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(10, (10*v).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(2, (FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(10)/5).HourSquareFeetDegreefahrenheitsPerBtu, HourSquareFeetDegreefahrenheitsPerBtuTolerance);
            Assert.AreEqual(2, FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(10)/FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(5), HourSquareFeetDegreefahrenheitsPerBtuTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            FoulingFactor oneHourSquareFeetDegreefahrenheitPerBtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            FoulingFactor twoHourSquareFeetDegreefahrenheitsPerBtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(2);

            Assert.True(oneHourSquareFeetDegreefahrenheitPerBtu < twoHourSquareFeetDegreefahrenheitsPerBtu);
            Assert.True(oneHourSquareFeetDegreefahrenheitPerBtu <= twoHourSquareFeetDegreefahrenheitsPerBtu);
            Assert.True(twoHourSquareFeetDegreefahrenheitsPerBtu > oneHourSquareFeetDegreefahrenheitPerBtu);
            Assert.True(twoHourSquareFeetDegreefahrenheitsPerBtu >= oneHourSquareFeetDegreefahrenheitPerBtu);

            Assert.False(oneHourSquareFeetDegreefahrenheitPerBtu > twoHourSquareFeetDegreefahrenheitsPerBtu);
            Assert.False(oneHourSquareFeetDegreefahrenheitPerBtu >= twoHourSquareFeetDegreefahrenheitsPerBtu);
            Assert.False(twoHourSquareFeetDegreefahrenheitsPerBtu < oneHourSquareFeetDegreefahrenheitPerBtu);
            Assert.False(twoHourSquareFeetDegreefahrenheitsPerBtu <= oneHourSquareFeetDegreefahrenheitPerBtu);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.AreEqual(0, hoursquarefeetdegreefahrenheitperbtu.CompareTo(hoursquarefeetdegreefahrenheitperbtu));
            Assert.Greater(hoursquarefeetdegreefahrenheitperbtu.CompareTo(FoulingFactor.Zero), 0);
            Assert.Less(FoulingFactor.Zero.CompareTo(hoursquarefeetdegreefahrenheitperbtu), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            hoursquarefeetdegreefahrenheitperbtu.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            hoursquarefeetdegreefahrenheitperbtu.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            FoulingFactor a = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            FoulingFactor b = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            FoulingFactor v = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.IsTrue(v.Equals(FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1)));
            Assert.IsFalse(v.Equals(FoulingFactor.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.IsFalse(hoursquarefeetdegreefahrenheitperbtu.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            FoulingFactor hoursquarefeetdegreefahrenheitperbtu = FoulingFactor.FromHourSquareFeetDegreefahrenheitsPerBtu(1);
            Assert.IsFalse(hoursquarefeetdegreefahrenheitperbtu.Equals(null));
        }
    }
}
